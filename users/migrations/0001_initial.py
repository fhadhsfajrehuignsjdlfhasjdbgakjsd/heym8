# Generated by Django 2.0.6 on 2018-07-02 14:41

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('communities', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that username already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(help_text='Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=50, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('uniqueURL', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('isDeleted', models.BooleanField(default=False)),
                ('isBanned', models.BooleanField(default=False)),
                ('bannedTill', models.DateField(null=True)),
                ('finalRating', models.FloatField(default=0.0)),
                ('lastSeen', models.DateTimeField(default=django.utils.timezone.now, verbose_name='was online for the last time')),
                ('communitiesList', models.ManyToManyField(related_name='members', to='communities.Community')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('mateList', models.ManyToManyField(related_name='mates', to=settings.AUTH_USER_MODEL)),
                ('sentReqs', models.ManyToManyField(related_name='received_Reqs', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PersonalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fttd', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('pltcs', 'Politics'), ('sprts', 'Sports and sportsmen'), ('msc', 'Music and musicians'), ('film', 'Cinema and actors'), ('phify', 'Philosophycal stuff'), ('ever', 'Everyday life'), ('abstr', 'Abstract topics')], max_length=40), blank=True, null=True, size=None)),
                ('fa', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('creac', 'Creative activity'), ('inte', 'Internet stuff'), ('sprts', 'Sports'), ('tv', 'Watching Television'), ('gam', 'Games'), ('trvl', 'Travelling'), ('wsttm', 'Wasting time'), ('wlk', 'Walking'), ('cmm', 'Communication with people')], max_length=40), blank=True, null=True, size=3)),
                ('lp', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('seldev', 'Self-development'), ('mon', 'Money'), ('famandglr', 'Fame and glory'), ('famandfr', 'Family and friends'), ('mnp', 'Meeting new people'), ('ent', 'Entertainment'), ('wor-dev', 'Contribution to world development')], max_length=40), blank=True, null=True, size=3)),
                ('mvpq', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('mnd', 'Mind'), ('hnst', 'Honesty'), ('dscp', 'Discipline'), ('hmsnc', 'Sense of humour(meme passion)'), ('eazy', 'Ease in relation to life'), ('hmn', 'Humanity')], max_length=40), blank=True, null=True, size=3)),
                ('language', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('RU', 'Russian'), ('EN', 'English')], max_length=7), blank=True, null=True, size=None)),
                ('gender', models.CharField(blank=True, max_length=1, null=True)),
                ('dob', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personal_Info', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'personalInfo',
                'verbose_name_plural': 'personalInfos',
            },
        ),
        migrations.CreateModel(
            name='StatisticInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confirmationKey', models.UUIDField(null=True, verbose_name='key to redirect in email')),
                ('isActive', models.BooleanField(default=True)),
                ('nOfReceivedSpamComplaints', models.IntegerField(default=0)),
                ('usedMeetMate', models.BooleanField(default=False)),
                ('usedRateMate', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistic_Info', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'statisticInfo',
                'verbose_name_plural': 'statisticInfos',
            },
        ),
        migrations.CreateModel(
            name='Thought',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isDeleted', models.BooleanField()),
                ('time', models.DateTimeField()),
                ('isTemporary', models.BooleanField()),
                ('expiresOn', models.DateTimeField()),
                ('content', models.CharField(max_length=900)),
            ],
            options={
                'verbose_name': 'thought',
                'verbose_name_plural': 'thoughts',
            },
        ),
        migrations.CreateModel(
            name='UserAlbum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=35)),
                ('description', models.CharField(max_length=100)),
                ('custom', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='albums', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserBreakingHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nOfExtDugsPropBreakings', models.IntegerField(default=0)),
                ('nOfSuicCallBreakings', models.IntegerField(default=0)),
                ('nOfDiscreditBreakings', models.IntegerField(default=0)),
                ('nOfAdultContentBreakings', models.IntegerField(default=0)),
                ('nOfSpamComplaints', models.IntegerField(default=0)),
                ('lastTimeUserGotSpamComplaint', models.DateField(null=True)),
                ('nOfSpamBreakings', models.IntegerField(default=0)),
                ('thoughUserWasBannedFor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='thought_User_Was_Banned_For', to='users.Thought')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='breaking_History', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UserBreakingHistory',
                'verbose_name_plural': 'UserBreakingHistories',
            },
        ),
        migrations.CreateModel(
            name='UserPicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploadTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('picture', models.ImageField(upload_to='')),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pictures', to='users.UserAlbum')),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isOpenForNewAcquaintances', models.BooleanField(default=True)),
                ('whoCanSeeMyGeoLocation', models.CharField(max_length=6)),
                ('whoCanSeeMyAlbums', models.CharField(max_length=6)),
                ('blockedUsers', models.ManyToManyField(related_name='blocked_By', to=settings.AUTH_USER_MODEL)),
                ('mainPicture', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='main_For', to='users.UserPicture')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'userSettings',
                'verbose_name_plural': 'userSettings',
            },
        ),
        migrations.AddField(
            model_name='thought',
            name='pictures',
            field=models.ManyToManyField(related_name='attached_To', to='users.UserPicture'),
        ),
        migrations.AddField(
            model_name='thought',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thoughts', to=settings.AUTH_USER_MODEL),
        ),
    ]
